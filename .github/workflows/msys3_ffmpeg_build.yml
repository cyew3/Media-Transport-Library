name: Windows Self-Hosted MSYS2 FFmpeg build
on:
  push:
    paths:
      - .github/workflows/msys3_ffmpeg_build.yml
env:
  DPDK_VERSION: 23.03
  FFMPEG_VERSION: 4.4
  MSYSTEM_PREFIX: mingw64
  MSYS: winjitdebug
  
jobs:
  build:
    runs-on: [ self-hosted ]
    strategy:
      matrix:
        include:
          - { sys: mingw64, env: x86_64, arch: x86_64 }
    defaults:
      run:
        shell: C:/msys64/msys2_shell.cmd -defterm -here -no-start -mingw64 {0}
    steps:          
      - name: Checkout IMTL repo
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: 'OpenVisualCloud/Media-Transport-Library'
          ref: main
          path: Media-Transport-Library
          
      - name: Checkout DPDK repo
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: 'DPDK/dpdk'
          ref: v${{env.DPDK_VERSION}}
          path: dpdk
          clean: true
 
      - name: Checkout mman-win32
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: 'alitrack/mman-win32'
          ref: master
          path: mman-win32

      - name: Checkout Cisco H264
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: 'cisco/openh264'
          ref: openh264v2.3.1
          path: openh264
          
      - name: Install Pacboy dependencies
        run: |
          echo y | pacman -Su --noconfirm git base-devel unzip pactoys
          head -n 2 < <(yes $'yes') | pacboy -S openssl:p gcc:p meson:p pkg-config:p json-c:p libpcap:p gtest:p SDL2:p SDL2_ttf:p dlfcn:p
          # Prevent pkg-config package to be removed (Default: pkgconfig)
          #echo n | pacman -Syuu
          echo y | pacboy -S binutils:p clang:p diffutils:p libx264:p libva:p ffnvcodec-headers:p nasm:p yasm:p
          
      - name: Convert symlink patch files to real file
        run: |
          cd Media-Transport-Library/patches/dpdk/${{env.DPDK_VERSION}}
          ls *.patch | xargs -I{} bash -c 'if [[ $(sed -n '1p' "{}") =~ ^../.*\.patch$ ]]; then cp "$(cat "{}")" "{}"; fi'
          cd windows
          ls *.patch | xargs -I{} bash -c 'if [[ $(sed -n '1p' "{}") =~ ^../.*\.patch$ ]]; then cp "$(cat "{}")" "{}"; fi'
          
      - name: Apply patches for DPDK
        run: |
          cd dpdk
          git reset --hard
          git checkout v${{env.DPDK_VERSION}}
          git config user.name github-actions
          git config user.email github-actions@github.com
          git am ../Media-Transport-Library/patches/dpdk/${{env.DPDK_VERSION}}/*.patch
          git am ../Media-Transport-Library/patches/dpdk/${{env.DPDK_VERSION}}/windows/*.patch
          
      - name: Build dpdk
        run: |
          cd dpdk
          meson setup build
          meson install -C build

      - name: Copy DPDK eal/kni libs to IMTL
        run: |
          cd Media-Transport-Library
          mkdir -p dpdk/lib/eal/windows/include dpdk/lib/kni /c/ffmpeg_github
          cp -rf ../dpdk/lib/eal/windows/include/* dpdk/lib/eal/windows/include
          cp -rf ../dpdk/lib/kni/* dpdk/lib/kni
          
      - name: Build IMTL lib
        run: |
          cd Media-Transport-Library
          meson setup build
          meson install -C build
                    
      - name: Build IMTL app dependency
        run: | 
         cd mman-win32
          ./configure --prefix=${MSYSTEM_PREFIX}
          make -j$(nproc) && make install
          
      - name: Build IMTL app
        run: |
          cd Media-Transport-Library/app
          meson setup build
          meson compile -C build
          
      - name: Build IMTL plugins
        run: |
          cd Media-Transport-Library/plugins
          meson setup build
          meson install -C build
          
      - name: Build IMTL lib with TAP
        #shell: C:\msys64\mingw64.exe {0}
        #export PATH=/c/msys64/usr/bin:$PATH
        run: |
          cd  Media-Transport-Library
          meson setup tap_build -Denable_tap=true
          meson install -C tap_build

      - name: Fix mingw64 binutils 
        run: |
          # Fixes in https://sourceforge.net/p/mingw-w64/mailman/message/29053757/
          #ls -al /mingw64/bin
          cp -f /mingw64/bin/ar.exe /mingw64/bin/x86_64-w64-mingw32-ar.exe
          cp -f /mingw64/bin/dlltool.exe /mingw64/bin/x86_64-w64-mingw32-dlltool.exe
          cp -f /mingw64/bin/nm.exe /mingw64/bin/x86_64-w64-mingw32-nm.exe
          cp -f /mingw64/bin/strip.exe /mingw64/bin/x86_64-w64-mingw32-strip.exe
          cp -f /mingw64/bin/windres.exe /mingw64/bin/x86_64-w64-mingw32-windres.exe
          
      - name: Build Open H264
        run: |
          cd openh264
          meson build
          ninja -C build install
          
      - name: Build FFmpeg v4.4
        run: |
          cd ffmpeg
          ./configure --arch=${{matrix.env}} --target-os=${{matrix.sys}} --cross-prefix=${{matrix.arch}}-w64-mingw32- --prefix=/c/ffmpeg_github --enable-shared --enable-nonfree --enable-gpl --disable-lto --enable-pic  --disable-w32threads --enable-mtl --enable-libx264 --enable-libopenh264 --enable-encoder=libopenh264
          make -j$(nproc)
          make install
          cat ffbuild/config.log
          
      - name: Archivezip artifacts
        run: |
          zip -r libmtl-dll.zip Media-Transport-Library/build/lib
          
      - uses: actions/upload-artifact@v3
        with:
          name: Intel MTL Library
          path: libmtl-dll.zip
      
      - uses: actions/upload-artifact@v3
        with:
          name: Intel FFmpeg v${{env.FFMPEG_VERSION}} ffbuild logs
          path: ffmpeg/ffbuild/config.log
       
