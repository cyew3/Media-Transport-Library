name: Windows MSYS2 FFmpeg build
on:
  push:
    paths:
      - .github/workflows/msys2_ffmpeg_build.yml
env:
  DPDK_VERSION: 23.03
  FFMPEG_VERSION: 4.4
  MSYS: winjitdebug
  
jobs:
  build:
    runs-on: [ windows-latest ]
    strategy:
      matrix:
        include:
          - { sys: mingw64, env: x86_64, arch: x86_64 }
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Install FFmpeg & IMTL Packages
        uses: msys2/setup-msys2@v2.17.0
        with:
          msystem: ${{matrix.sys}}
          update: true
          install: >-
            git
            base-devel
            unzip
            zip
          pacboy: >-
            make:p
            cmake:p
            diffutils:p
            yasm:p
            nasm:p
            SDL:p
            SDL2:p
            SDL2_ttf:p
            toolchain:p
            libx264:p
            binutils:p
            ffnvcodec-headers:p
            libva:p
            clang:p
            libx264:p
            openssl:p
            gcc:p
            meson:p
            pkg-config:p
            json-c:p
            libpcap:p
            dlfcn:p
            
      - name: Install tools
        run: |
          wget https://nmap.org/npcap/dist/npcap-sdk-1.12.zip
          unzip -d npcap-sdk npcap-sdk-1.12.zip
          cp npcap-sdk/Lib/x64/* $MSYSTEM_PREFIX/lib/
          
      - name: Checkout IMTL repo
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        
      - name: Checkout DPDK repo
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: 'DPDK/dpdk'
          ref: v${{ env.DPDK_VERSION }}
          path: dpdk
       
      - name: Checkout Cisco H264
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: 'cisco/openh264'
          ref: openh264v2.3.1
          path: openh264
          
      - name: Checkout mman-win32
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: 'alitrack/mman-win32'
          ref: master
          path: mman-win32
      
      - name: Convert symlink patch files to real file
        run: |
          cd patches/dpdk/${{  env.DPDK_VERSION  }}
          ls *.patch | xargs -I{} bash -c 'if [[ $(sed -n '1p' "{}") =~ ^../.*\.patch$ ]]; then cp "$(cat "{}")" "{}"; fi'
          cd windows
          ls *.patch | xargs -I{} bash -c 'if [[ $(sed -n '1p' "{}") =~ ^../.*\.patch$ ]]; then cp "$(cat "{}")" "{}"; fi'
      
      - name: Apply patches for DPDK
        shell: bash
        run: |
          cd dpdk
          git config user.name github-actions
          git config user.email github-actions@github.com
          git am ../patches/dpdk/${{  env.DPDK_VERSION  }}/*.patch
          git am ../patches/dpdk/${{  env.DPDK_VERSION  }}/windows/*.patch

      - name: Build dpdk
        run: |
          cd dpdk
          meson setup build
          meson install -C build

      - name: Build IMTL lib
        run: |
          meson setup build
          meson install -C build
                    
      - name: Build IMTL app dependency
        run: | 
          cd ${{ env.GITHUB_WORKSPACE }}\mman-win32
          ./configure --prefix=${MSYSTEM_PREFIX}
          make -j$(nproc) && make install
          
      - name: Build IMTL app
        run: |
          cd app
          meson setup build
          meson compile -C build
          
      - name: Build IMTL plugins
        run: |
          cd plugins
          meson setup build
          meson install -C build

      - name: Build IMTL lib with TAP
        run: |
          meson setup tap_build -Denable_tap=true
          meson install -C tap_build
          
      - name: Build OpenH264
        run: |
          cd openh264
          make -j$(nproc) && make install
          
      - name: Fix mingw64 binutils 
        run: |
          # Fixes in https://sourceforge.net/p/mingw-w64/mailman/message/29053757/
          #ls -al /mingw64/bin
          cp -f /mingw64/bin/ar.exe /mingw64/bin/x86_64-w64-mingw32-ar.exe
          cp -f /mingw64/bin/dlltool.exe /mingw64/bin/x86_64-w64-mingw32-dlltool.exe
          cp -f /mingw64/bin/nm.exe /mingw64/bin/x86_64-w64-mingw32-nm.exe
          cp -f /mingw64/bin/strip.exe /mingw64/bin/x86_64-w64-mingw32-strip.exe
          cp -f /mingw64/bin/windres.exe /mingw64/bin/x86_64-w64-mingw32-windres.exe
          
      - name: Build FFmpeg v${{env.FFMPEG_VERSION}}
        run: |
          #env | sort
          echo "##########################################################################################################"
          echo "#                     Performing Windows FFmpeg customizations build /w MSYS2                            #"
          echo "##########################################################################################################"
          export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com
          #mkdir -p ${HOME}/ffmpeg/lib
          #cd ${GITHUB_WORKSPACE}
          git clone https://git.ffmpeg.org/ffmpeg.git FFmpeg
          cd FFmpeg
          git checkout release/4.4
          git reset --hard aa28df74ab197c49a05fecc40c81e0f8ec4ad0c3
          cp -f ../ecosystem/ffmpeg_plugin/kahawai_common.c ./libavdevice/
          cp -f ../ecosystem/ffmpeg_plugin/kahawai_common.h ./libavdevice/
          cp -f ../ecosystem/ffmpeg_plugin/kahawai_dec.c ./libavdevice/
          cp -f ../ecosystem/ffmpeg_plugin/kahawai_enc.c ./libavdevice/
          git am --whitespace=fix ../ecosystem/ffmpeg_plugin/0001-avdevice-kahawai-Add-kahawai-input-output-devices.patch
          
          ./configure --arch=${{matrix.env}} --target-os=${{matrix.sys}} --cross-prefix=${{matrix.arch}}-w64-mingw32- --prefix=${HOME}/ffmpeg --enable-shared \
          --disable-lto --disable-w32threads --enable-nonfree --enable-gpl --enable-mtl --enable-pic --enable-libx264 --enable-libopenh264 --enable-encoder=libopenh264
          make -j$(nproc)
          echo "INFO: FFmpeg Compiled Successfully: $?"
          make install

          export PATH=$HOME/ffmpeg/bin:$PATH
          ffmpeg -version
          ffmpeg -framerate 60 -pixel_format yuv422p10le -width 1920 -height 1080 -udp_port 20000 -port 0000:31:00.0 -local_addr "192.168.96.2" -src_addr "239.168.85.20" -dma_dev "0000:00:01.0" -ext_frames_mode 1 -f kahawai -i "k" -vframes 2000 -f rawvideo /dev/null -y"
          cat ffbuild/config.log
          
          #cp -rf /mingw64/lib/*.dll* $HOME/ffmpeg/lib
          #cp -rf /mingw64/lib/*.a $HOME/ffmpeg/lib
          #cp -rf /mingw64/bin/*.dll* $HOME/ffmpeg/bin
          #cp -f ../build/lib/libmtl.dll $HOME/ffmpeg/bin
          #cp -f ../build/lib/libmtl.dll.a $HOME/ffmpeg/bin
          
          # Archive artifacts
          #tar -cvzf ffmpeg-mingw64-bin.tgz $HOME/ffmpeg/bin
          #zip -f ffmpeg-mingw64-lib.zip $HOME/ffmpeg/lib
          zip -r ffmpeg-mingw64.zip $HOME/ffmpeg
          zip -r imtl-dll.zip ../build/lib
          
      - uses: actions/upload-artifact@v3
        with:
          name: Release FFmpeg v4.4 Cross Compile Mingw64 64-bit Binaries
          path: FFmpeg/ffmpeg-mingw64.zip
          
      #- uses: actions/upload-artifact@v3
      #  with:
      #    name: Release Mingw64 lib files
      #    path: FFmpeg/ffmpeg-mingw64-lib.zip
      
      - uses: actions/upload-artifact@v3
        with:
          name: Intel MTL DLL libraries
          path: FFmpeg/imtl-dll.zip
